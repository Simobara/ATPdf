{"ast":null,"code":"import { Paragraph, TextRun } from 'docx';\n// import nlp from 'compromise';\n\n// const extractProfiloWithNLP = (origText) => {\n//     const doc = nlp(origText);\n//     const numbers = doc.numbers().out('array'); // estrae tutti i numeri\n//     for (let number of numbers) {\n//         let cleanedNumber = number.replace(/[\\s-]/g, '');\n//         if (cleanedNumber.length >= 5 && cleanedNumber.length <= 15) {\n//             return cleanedNumber;\n//         }\n//     }\n//     return null;\n// }\n\nconst extractProfilo = origText => {\n  // const keywords = [\n  //     \"apparecchio\", \"canale\", \"cell\", \"cell phone\", \"cellulare\", \"chiamata\", \"cifra\", \"codice\", \"collegamento\", \"connessione\", \"contatto\", \"fisso\", \"landline\", \"linea\", \"mobile\", \"mobile phone\", \"numero\", \"numero di telefono\", \"Phone\", \"phone number\", \"rapporto\", \"richiamo\", \"smartphone\", \"tel\", \"telefono\", \"telefono fisso\", \"telefonata\"\n  // ];\n  // const keywordRegex = new RegExp(`(${keywords.join(\"|\")})[:\\\\s]*`, \"i\");\n  // const matchKeyword = origText.match(keywordRegex); // Estrai potenziale numero dopo la parola chiave\n  // if (matchKeyword) {\n  //     const startIdx = matchKeyword.index + matchKeyword[0].length;\n  //     const slicedText = origText.slice(startIdx);\n  //     // Cercare un `+` (con possibili spazi) seguito da altri possibili spazi e poi da una serie di numeri che, una volta \"ripuliti\", sono tra 5 e 15 cifre\n  //     const numberWithPrefix = slicedText.match(/(\\+\\s*)?(\\d[\\s-]*){5,15}/);\n  //     if (numberWithPrefix) {\n  //         const cleanedNumber = numberWithPrefix[0].replace(/[\\s-]/g, '');\n  //         // Verifica se il numero \"ripulito\" ha una lunghezza tra 5 e 15 cifre\n  //         if (cleanedNumber.length >= 5 && cleanedNumber.length <= 15) {\n  //             return cleanedNumber; // Questo manterrà il `+` nel numero finale se presente\n  //         }\n  //     }\n  // }\n  return null;\n};\nexport const getPro = async origText => {\n  let profilo = await extractProfilo(origText);\n  // if (!phoneNumber) {\n  //     phoneNumber = extractProfiloWithNLP(origText);\n  // }\n  return new Paragraph({\n    alignment: \"left\",\n    children: [new TextRun(`Profilo: ${profilo ? profilo : \" / \"}`)]\n  });\n};","map":{"version":3,"names":["Paragraph","TextRun","extractProfilo","origText","getPro","profilo","alignment","children"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/1PersonaInf/1GetProfilo/getProfilo.jsx"],"sourcesContent":["import { Paragraph, TextRun } from 'docx';\n// import nlp from 'compromise';\n\n// const extractProfiloWithNLP = (origText) => {\n//     const doc = nlp(origText);\n//     const numbers = doc.numbers().out('array'); // estrae tutti i numeri\n//     for (let number of numbers) {\n//         let cleanedNumber = number.replace(/[\\s-]/g, '');\n//         if (cleanedNumber.length >= 5 && cleanedNumber.length <= 15) {\n//             return cleanedNumber;\n//         }\n//     }\n//     return null;\n// }\n\n\nconst extractProfilo = (origText) => {\n    // const keywords = [\n    //     \"apparecchio\", \"canale\", \"cell\", \"cell phone\", \"cellulare\", \"chiamata\", \"cifra\", \"codice\", \"collegamento\", \"connessione\", \"contatto\", \"fisso\", \"landline\", \"linea\", \"mobile\", \"mobile phone\", \"numero\", \"numero di telefono\", \"Phone\", \"phone number\", \"rapporto\", \"richiamo\", \"smartphone\", \"tel\", \"telefono\", \"telefono fisso\", \"telefonata\"\n    // ];\n    // const keywordRegex = new RegExp(`(${keywords.join(\"|\")})[:\\\\s]*`, \"i\");\n    // const matchKeyword = origText.match(keywordRegex); // Estrai potenziale numero dopo la parola chiave\n    // if (matchKeyword) {\n    //     const startIdx = matchKeyword.index + matchKeyword[0].length;\n    //     const slicedText = origText.slice(startIdx);\n    //     // Cercare un `+` (con possibili spazi) seguito da altri possibili spazi e poi da una serie di numeri che, una volta \"ripuliti\", sono tra 5 e 15 cifre\n    //     const numberWithPrefix = slicedText.match(/(\\+\\s*)?(\\d[\\s-]*){5,15}/);\n    //     if (numberWithPrefix) {\n    //         const cleanedNumber = numberWithPrefix[0].replace(/[\\s-]/g, '');\n    //         // Verifica se il numero \"ripulito\" ha una lunghezza tra 5 e 15 cifre\n    //         if (cleanedNumber.length >= 5 && cleanedNumber.length <= 15) {\n    //             return cleanedNumber; // Questo manterrà il `+` nel numero finale se presente\n    //         }\n    //     }\n    // }\n    return null;\n}\n\n\n\nexport const getPro = async (origText) => {\n    let profilo = await extractProfilo(origText);\n    // if (!phoneNumber) {\n    //     phoneNumber = extractProfiloWithNLP(origText);\n    // }\n    return new Paragraph({\n        alignment: \"left\",\n        children: [\n            new TextRun(`Profilo: ${profilo ? profilo : \" / \"}`)\n        ]\n    });\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,MAAM;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,cAAc,GAAIC,QAAQ,IAAK;EACjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,IAAI;AACf,CAAC;AAID,OAAO,MAAMC,MAAM,GAAG,MAAOD,QAAQ,IAAK;EACtC,IAAIE,OAAO,GAAG,MAAMH,cAAc,CAACC,QAAQ,CAAC;EAC5C;EACA;EACA;EACA,OAAO,IAAIH,SAAS,CAAC;IACjBM,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,CACN,IAAIN,OAAO,CAAE,YAAWI,OAAO,GAAGA,OAAO,GAAG,KAAM,EAAC,CAAC;EAE5D,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}