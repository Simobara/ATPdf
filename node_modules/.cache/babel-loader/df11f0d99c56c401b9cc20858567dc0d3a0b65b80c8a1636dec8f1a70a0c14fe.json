{"ast":null,"code":"import { Paragraph, TextRun } from 'docx';\nconst extractPatente = origText => {\n  const keywordsItalian = [\"abilitazione\", \"autorizzazione\", \"brevetto\", \"Carta di guida\", \"certificato\", \"concessione\", \"guida\", \"Licenza di guida\", \"licenza\", \"patente\", \"Permesso di guida\", \"permesso\", \"Tessera di guida\"];\n  const keywordsEnglish = [\"authorization\", \"certificate\", \"concession\", \"driving card\", \"driving licence\", \"driving license\", \"driving permit\", \"guide\", \"license\", \"patent\", \"permit\"];\n  const macchinaSynonyms = [\"macchina\", \"automobile\", \"auto\", \"autovettura\", \"veicolo\", \"berlina\", \"vettura\", \"car\", \"automobile\", \"vehicle\", \"motorcar\", \"auto\", \"machine\"];\n  const combinedKeywords = [...keywordsItalian, ...keywordsEnglish];\n  const targetWords = [\"A\", \"B\", \"C\", ...macchinaSynonyms];\n  const regex = new RegExp(`\\\\b(${combinedKeywords.join(\"|\")})\\\\b(?:\\\\W+(?:\\\\w+)?){0,5}?\\\\W+(${targetWords.join(\"|\")})\\\\b`, \"i\");\n  const match = origText.match(regex);\n  if (match && macchinaSynonyms.includes(match[2].toLowerCase())) {\n    return \"B\";\n  }\n  return match ? match[2] : null;\n};\nexport const getPat = async origText => {\n  const patente = await extractPatente(origText);\n  // console.log(\"sto leggendo questo testo:\", origText)\n  return new Paragraph({\n    alignment: \"left\",\n    children: [new TextRun(`Patente: ${patente ? patente : \" / \"}`)]\n  });\n};","map":{"version":3,"names":["Paragraph","TextRun","extractPatente","origText","keywordsItalian","keywordsEnglish","macchinaSynonyms","combinedKeywords","targetWords","regex","RegExp","join","match","includes","toLowerCase","getPat","patente","alignment","children"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/9Patent/patente.jsx"],"sourcesContent":["import { Paragraph, TextRun } from 'docx';\n\nconst extractPatente = (origText) => {\n    const keywordsItalian = [\n        \"abilitazione\", \"autorizzazione\", \"brevetto\", \"Carta di guida\", \"certificato\", \"concessione\", \"guida\", \"Licenza di guida\", \"licenza\", \"patente\", \"Permesso di guida\", \"permesso\", \"Tessera di guida\"\n    ];\n    const keywordsEnglish = [\n        \"authorization\", \"certificate\", \"concession\", \"driving card\", \"driving licence\", \"driving license\", \"driving permit\", \"guide\", \"license\", \"patent\", \"permit\"\n    ];\n    const macchinaSynonyms = [\n        \"macchina\", \"automobile\", \"auto\", \"autovettura\", \"veicolo\", \"berlina\", \"vettura\", \"car\", \"automobile\", \"vehicle\", \"motorcar\", \"auto\", \"machine\"\n    ];\n    const combinedKeywords = [...keywordsItalian, ...keywordsEnglish];\n    const targetWords = [\"A\", \"B\", \"C\", ...macchinaSynonyms];\n    const regex = new RegExp(`\\\\b(${combinedKeywords.join(\"|\")})\\\\b(?:\\\\W+(?:\\\\w+)?){0,5}?\\\\W+(${targetWords.join(\"|\")})\\\\b`, \"i\");\n    const match = origText.match(regex);\n    if (match && macchinaSynonyms.includes(match[2].toLowerCase())) {\n        return \"B\";\n    }\n    return match ? match[2] : null;\n};\n\n\n\nexport const getPat = async (origText) => {\n    const patente = await extractPatente(origText);\n    // console.log(\"sto leggendo questo testo:\", origText)\n    return new Paragraph({\n        alignment: \"left\",\n        children: [\n            new TextRun(`Patente: ${patente ? patente : \" / \"}`)\n        ]\n    });\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,MAAM;AAEzC,MAAMC,cAAc,GAAIC,QAAQ,IAAK;EACjC,MAAMC,eAAe,GAAG,CACpB,cAAc,EAAE,gBAAgB,EAAE,UAAU,EAAE,gBAAgB,EAAE,aAAa,EAAE,aAAa,EAAE,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,SAAS,EAAE,mBAAmB,EAAE,UAAU,EAAE,kBAAkB,CACvM;EACD,MAAMC,eAAe,GAAG,CACpB,eAAe,EAAE,aAAa,EAAE,YAAY,EAAE,cAAc,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAC/J;EACD,MAAMC,gBAAgB,GAAG,CACrB,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,CAClJ;EACD,MAAMC,gBAAgB,GAAG,CAAC,GAAGH,eAAe,EAAE,GAAGC,eAAe,CAAC;EACjE,MAAMG,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAGF,gBAAgB,CAAC;EACxD,MAAMG,KAAK,GAAG,IAAIC,MAAM,CAAE,OAAMH,gBAAgB,CAACI,IAAI,CAAC,GAAG,CAAE,mCAAkCH,WAAW,CAACG,IAAI,CAAC,GAAG,CAAE,MAAK,EAAE,GAAG,CAAC;EAC9H,MAAMC,KAAK,GAAGT,QAAQ,CAACS,KAAK,CAACH,KAAK,CAAC;EACnC,IAAIG,KAAK,IAAIN,gBAAgB,CAACO,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAAC,EAAE;IAC5D,OAAO,GAAG;EACd;EACA,OAAOF,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;AAClC,CAAC;AAID,OAAO,MAAMG,MAAM,GAAG,MAAOZ,QAAQ,IAAK;EACtC,MAAMa,OAAO,GAAG,MAAMd,cAAc,CAACC,QAAQ,CAAC;EAC9C;EACA,OAAO,IAAIH,SAAS,CAAC;IACjBiB,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,CACN,IAAIjB,OAAO,CAAE,YAAWe,OAAO,GAAGA,OAAO,GAAG,KAAM,EAAC,CAAC;EAE5D,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}