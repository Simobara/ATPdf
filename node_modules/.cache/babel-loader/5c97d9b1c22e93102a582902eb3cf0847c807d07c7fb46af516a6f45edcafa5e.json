{"ast":null,"code":"import { Paragraph, TextRun } from 'docx';\nconst extractAutDatPer = origText => {\n  const keywords = [\"Autorizzazione Dati Personali\", \"Declaration\", \"Permessi\", \"Consensi\", \"Concessioni\", \"Licenze\", \"Approvazioni\", \"Assensi\", \"Validazioni\", \"Ratifiche\", \"Sanzioni\", \"Abilitazioni\"];\n\n  // Prova a cercare fino a \"2003\"\n  let regex = new RegExp(`(${keywords.join(\"|\")})([^]*?2003)`, \"i\");\n  let match = origText.match(regex);\n  if (!match) {\n    // In alternativa, prova a cercare fino a \"GDPR\"\n    regex = new RegExp(`(${keywords.join(\"|\")})([^]*?GDPR)`, \"i\");\n    match = origText.match(regex);\n  }\n  if (!match) {\n    // Se non trovi nessuno dei due, usa la logica originale\n    regex = new RegExp(`(${keywords.join(\"|\")})([^.]*\\\\.)`, \"i\");\n    match = origText.match(regex);\n  }\n  if (match) {\n    return match[2].trim();\n  }\n  return null;\n};\nconst extractAutDatPerSection = origText => {\n  const keywords = [\"Autorizzazione Dati Personali\", \"Declaration\", \"Permessi\", \"Consensi\", \"Concessioni\", \"Licenze\", \"Approvazioni\", \"Assensi\", \"Validazioni\", \"Ratifiche\", \"Sanzioni\", \"Abilitazioni\"];\n  const sections = origText.split(/\\n\\s*\\n/);\n  for (const section of sections) {\n    for (const keyword of keywords) {\n      if (section.trim().startsWith(keyword)) {\n        return section.trim();\n      }\n    }\n  }\n  return null;\n};\nexport const getAutDatPer = async origText => {\n  let autDatPer = await extractAutDatPer(origText);\n  if (!autDatPer) {\n    autDatPer = await extractAutDatPerSection(origText);\n  }\n  return new Paragraph({\n    alignment: \"left\",\n    children: [new TextRun(`Autorizzazione Dati Personali: ${autDatPer ? autDatPer : \" / NON CONCESSA \"}`)]\n  });\n};","map":{"version":3,"names":["Paragraph","TextRun","extractAutDatPer","origText","keywords","regex","RegExp","join","match","trim","extractAutDatPerSection","sections","split","section","keyword","startsWith","getAutDatPer","autDatPer","alignment","children"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/10AutorizzazioneDatiPers/autorizzazioneDatiPers.jsx"],"sourcesContent":["import { Paragraph, TextRun } from 'docx';\n\nconst extractAutDatPer = (origText) => {\n    const keywords = [\n        \"Autorizzazione Dati Personali\", \"Declaration\", \"Permessi\", \"Consensi\", \"Concessioni\", \"Licenze\", \"Approvazioni\", \"Assensi\", \"Validazioni\", \"Ratifiche\", \"Sanzioni\", \"Abilitazioni\"\n    ];\n\n    // Prova a cercare fino a \"2003\"\n    let regex = new RegExp(`(${keywords.join(\"|\")})([^]*?2003)`, \"i\");\n    let match = origText.match(regex);\n\n    if (!match) {\n        // In alternativa, prova a cercare fino a \"GDPR\"\n        regex = new RegExp(`(${keywords.join(\"|\")})([^]*?GDPR)`, \"i\");\n        match = origText.match(regex);\n    }\n\n    if (!match) {\n        // Se non trovi nessuno dei due, usa la logica originale\n        regex = new RegExp(`(${keywords.join(\"|\")})([^.]*\\\\.)`, \"i\");\n        match = origText.match(regex);\n    }\n\n    if (match) {\n        return match[2].trim();\n    }\n\n    return null;\n};\n\nconst extractAutDatPerSection = (origText) => {\n    const keywords = [\n        \"Autorizzazione Dati Personali\", \"Declaration\", \"Permessi\", \"Consensi\", \"Concessioni\", \"Licenze\", \"Approvazioni\", \"Assensi\", \"Validazioni\", \"Ratifiche\", \"Sanzioni\", \"Abilitazioni\"\n    ];\n\n    const sections = origText.split(/\\n\\s*\\n/);\n\n    for (const section of sections) {\n        for (const keyword of keywords) {\n            if (section.trim().startsWith(keyword)) {\n                return section.trim();\n            }\n        }\n    }\n\n    return null;\n};\n\nexport const getAutDatPer = async (origText) => {\n    let autDatPer = await extractAutDatPer(origText);\n    if (!autDatPer) {\n        autDatPer = await extractAutDatPerSection(origText);\n    }\n\n    return new Paragraph({\n        alignment: \"left\",\n        children: [\n            new TextRun(`Autorizzazione Dati Personali: ${autDatPer ? autDatPer : \" / NON CONCESSA \"}`)\n        ]\n    });\n};\n\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,MAAM;AAEzC,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;EACnC,MAAMC,QAAQ,GAAG,CACb,+BAA+B,EAAE,aAAa,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,cAAc,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,CACtL;;EAED;EACA,IAAIC,KAAK,GAAG,IAAIC,MAAM,CAAE,IAAGF,QAAQ,CAACG,IAAI,CAAC,GAAG,CAAE,cAAa,EAAE,GAAG,CAAC;EACjE,IAAIC,KAAK,GAAGL,QAAQ,CAACK,KAAK,CAACH,KAAK,CAAC;EAEjC,IAAI,CAACG,KAAK,EAAE;IACR;IACAH,KAAK,GAAG,IAAIC,MAAM,CAAE,IAAGF,QAAQ,CAACG,IAAI,CAAC,GAAG,CAAE,cAAa,EAAE,GAAG,CAAC;IAC7DC,KAAK,GAAGL,QAAQ,CAACK,KAAK,CAACH,KAAK,CAAC;EACjC;EAEA,IAAI,CAACG,KAAK,EAAE;IACR;IACAH,KAAK,GAAG,IAAIC,MAAM,CAAE,IAAGF,QAAQ,CAACG,IAAI,CAAC,GAAG,CAAE,aAAY,EAAE,GAAG,CAAC;IAC5DC,KAAK,GAAGL,QAAQ,CAACK,KAAK,CAACH,KAAK,CAAC;EACjC;EAEA,IAAIG,KAAK,EAAE;IACP,OAAOA,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC1B;EAEA,OAAO,IAAI;AACf,CAAC;AAED,MAAMC,uBAAuB,GAAIP,QAAQ,IAAK;EAC1C,MAAMC,QAAQ,GAAG,CACb,+BAA+B,EAAE,aAAa,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,cAAc,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,CACtL;EAED,MAAMO,QAAQ,GAAGR,QAAQ,CAACS,KAAK,CAAC,SAAS,CAAC;EAE1C,KAAK,MAAMC,OAAO,IAAIF,QAAQ,EAAE;IAC5B,KAAK,MAAMG,OAAO,IAAIV,QAAQ,EAAE;MAC5B,IAAIS,OAAO,CAACJ,IAAI,CAAC,CAAC,CAACM,UAAU,CAACD,OAAO,CAAC,EAAE;QACpC,OAAOD,OAAO,CAACJ,IAAI,CAAC,CAAC;MACzB;IACJ;EACJ;EAEA,OAAO,IAAI;AACf,CAAC;AAED,OAAO,MAAMO,YAAY,GAAG,MAAOb,QAAQ,IAAK;EAC5C,IAAIc,SAAS,GAAG,MAAMf,gBAAgB,CAACC,QAAQ,CAAC;EAChD,IAAI,CAACc,SAAS,EAAE;IACZA,SAAS,GAAG,MAAMP,uBAAuB,CAACP,QAAQ,CAAC;EACvD;EAEA,OAAO,IAAIH,SAAS,CAAC;IACjBkB,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,CACN,IAAIlB,OAAO,CAAE,kCAAiCgB,SAAS,GAAGA,SAAS,GAAG,kBAAmB,EAAC,CAAC;EAEnG,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}