{"ast":null,"code":"import { Paragraph, TextRun } from 'docx';\nconst removeAccents = str => {\n  return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n};\nconst extractDob = text => {\n  const sectionKeywords = [\"informazioni personali\", \"dati personali\", \"personal information\", \"personal details\"];\n  const keywords = [\"data di nascita\", \"nato il\", \"nata il\", \"nascita\", \"compleanno\", \"età\", \"eta'\", \"age\"];\n  let dob = null;\n  const normalizedText = removeAccents(text.toLowerCase());\n  const findPersonalSection = () => {\n    for (const keyword of sectionKeywords) {\n      if (normalizedText.includes(removeAccents(keyword.toLowerCase()))) {\n        return true;\n      }\n    }\n    return false;\n  };\n  if (findPersonalSection()) {\n    for (const keyword of keywords) {\n      const normalizedKeyword = removeAccents(keyword.toLowerCase());\n      if (normalizedText.includes(normalizedKeyword)) {\n        const line = normalizedText.split('\\n').find(line => line.includes(normalizedKeyword));\n        const dateMatch = line.match(/\\b(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})\\b/);\n        if (dateMatch) {\n          dob = dateMatch[1];\n          break;\n        } else {\n          const ageMatch = line.match(/\\b(?:eta|eta'|age)\\s*[:\\s]\\s*(\\d{1,2})\\b/);\n          if (ageMatch && parseInt(ageMatch[1], 10) >= 16 && parseInt(ageMatch[1], 10) <= 60) {\n            dob = keyword === \"age\" ? `(Age: ${ageMatch[1]})` : `(Età: ${ageMatch[1]})`;\n            break;\n          }\n        }\n      }\n    }\n  }\n  return dob;\n};\nexport const getDob = async origText => {\n  const dob = await extractDob(origText);\n  return new Paragraph({\n    alignment: \"left\",\n    children: [new TextRun(`Data di Nascita: ${dob ? dob : \" / \"}`)]\n  });\n};","map":{"version":3,"names":["Paragraph","TextRun","removeAccents","str","normalize","replace","extractDob","text","sectionKeywords","keywords","dob","normalizedText","toLowerCase","findPersonalSection","keyword","includes","normalizedKeyword","line","split","find","dateMatch","match","ageMatch","parseInt","getDob","origText","alignment","children"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/1PersonaInf/2GetDob/getDob.jsx"],"sourcesContent":["import { Paragraph, TextRun } from 'docx';\n\nconst removeAccents = (str) => {\n    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n}\n\nconst extractDob = (text) => {\n    const sectionKeywords = [\"informazioni personali\", \"dati personali\", \"personal information\", \"personal details\"];\n    const keywords = [\"data di nascita\", \"nato il\", \"nata il\", \"nascita\", \"compleanno\", \"età\", \"eta'\", \"age\"];\n    let dob = null;\n    const normalizedText = removeAccents(text.toLowerCase());\n    const findPersonalSection = () => {\n        for (const keyword of sectionKeywords) {\n            if (normalizedText.includes(removeAccents(keyword.toLowerCase()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (findPersonalSection()) {\n        for (const keyword of keywords) {\n            const normalizedKeyword = removeAccents(keyword.toLowerCase());\n            if (normalizedText.includes(normalizedKeyword)) {\n                const line = normalizedText.split('\\n').find(line => line.includes(normalizedKeyword));\n                const dateMatch = line.match(/\\b(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})\\b/);\n                if (dateMatch) {\n                    dob = dateMatch[1];\n                    break;\n                } else {\n                    const ageMatch = line.match(/\\b(?:eta|eta'|age)\\s*[:\\s]\\s*(\\d{1,2})\\b/);\n                    if (ageMatch && parseInt(ageMatch[1], 10) >= 16 && parseInt(ageMatch[1], 10) <= 60) {\n                        dob = keyword === \"age\" ? `(Age: ${ageMatch[1]})` : `(Età: ${ageMatch[1]})`;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return dob;\n}\n\n\n\nexport const getDob = async (origText) => {\n    const dob = await extractDob(origText);\n    return new Paragraph({\n        alignment: \"left\",\n        children: [\n            new TextRun(`Data di Nascita: ${dob ? dob : \" / \"}`)\n        ]\n    });\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,MAAM;AAEzC,MAAMC,aAAa,GAAIC,GAAG,IAAK;EAC3B,OAAOA,GAAG,CAACC,SAAS,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;AAC/D,CAAC;AAED,MAAMC,UAAU,GAAIC,IAAI,IAAK;EACzB,MAAMC,eAAe,GAAG,CAAC,wBAAwB,EAAE,gBAAgB,EAAE,sBAAsB,EAAE,kBAAkB,CAAC;EAChH,MAAMC,QAAQ,GAAG,CAAC,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC;EACzG,IAAIC,GAAG,GAAG,IAAI;EACd,MAAMC,cAAc,GAAGT,aAAa,CAACK,IAAI,CAACK,WAAW,CAAC,CAAC,CAAC;EACxD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAC9B,KAAK,MAAMC,OAAO,IAAIN,eAAe,EAAE;MACnC,IAAIG,cAAc,CAACI,QAAQ,CAACb,aAAa,CAACY,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;QAC/D,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EACD,IAAIC,mBAAmB,CAAC,CAAC,EAAE;IACvB,KAAK,MAAMC,OAAO,IAAIL,QAAQ,EAAE;MAC5B,MAAMO,iBAAiB,GAAGd,aAAa,CAACY,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC;MAC9D,IAAID,cAAc,CAACI,QAAQ,CAACC,iBAAiB,CAAC,EAAE;QAC5C,MAAMC,IAAI,GAAGN,cAAc,CAACO,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAACF,IAAI,IAAIA,IAAI,CAACF,QAAQ,CAACC,iBAAiB,CAAC,CAAC;QACtF,MAAMI,SAAS,GAAGH,IAAI,CAACI,KAAK,CAAC,qCAAqC,CAAC;QACnE,IAAID,SAAS,EAAE;UACXV,GAAG,GAAGU,SAAS,CAAC,CAAC,CAAC;UAClB;QACJ,CAAC,MAAM;UACH,MAAME,QAAQ,GAAGL,IAAI,CAACI,KAAK,CAAC,0CAA0C,CAAC;UACvE,IAAIC,QAAQ,IAAIC,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,IAAIC,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;YAChFZ,GAAG,GAAGI,OAAO,KAAK,KAAK,GAAI,SAAQQ,QAAQ,CAAC,CAAC,CAAE,GAAE,GAAI,SAAQA,QAAQ,CAAC,CAAC,CAAE,GAAE;YAC3E;UACJ;QACJ;MACJ;IACJ;EACJ;EACA,OAAOZ,GAAG;AACd,CAAC;AAID,OAAO,MAAMc,MAAM,GAAG,MAAOC,QAAQ,IAAK;EACtC,MAAMf,GAAG,GAAG,MAAMJ,UAAU,CAACmB,QAAQ,CAAC;EACtC,OAAO,IAAIzB,SAAS,CAAC;IACjB0B,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,CACN,IAAI1B,OAAO,CAAE,oBAAmBS,GAAG,GAAGA,GAAG,GAAG,KAAM,EAAC,CAAC;EAE5D,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}