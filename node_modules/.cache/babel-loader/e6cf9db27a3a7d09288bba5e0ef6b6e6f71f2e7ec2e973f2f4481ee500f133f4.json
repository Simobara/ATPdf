{"ast":null,"code":"import { Paragraph, TextRun } from 'docx';\nfunction extractPhoneNumber(text) {\n  const keywords = [\"telefono\", \"tel\", \"cell\", \"mobile\"];\n  const keywordRegex = new RegExp(`(${keywords.join(\"|\")})[:\\\\s]*`, \"i\");\n\n  // Estrai potenziale numero dopo la parola chiave\n  const matchKeyword = text.match(keywordRegex);\n  if (matchKeyword) {\n    const startIdx = matchKeyword.index + matchKeyword[0].length;\n    const slicedText = text.slice(startIdx);\n\n    // Verifica la presenza di +39 e successivamente verifica se ci sono 10 cifre\n    const italianMobileWithPrefix = slicedText.match(/\\+39[\\s-]*(\\d[\\s-]*){10}/);\n    if (italianMobileWithPrefix) {\n      // Rimuovi spazi e trattini, quindi combina con +39\n      const cleanedNumber = italianMobileWithPrefix[0].replace(/[\\s-]/g, '');\n      return cleanedNumber;\n    }\n\n    // Se non trova +39, verifica se ci sono solo 10 cifre\n    const italianMobileWithoutPrefix = slicedText.match(/(\\d[\\s-]*){10}/);\n    if (italianMobileWithoutPrefix) {\n      // Rimuovi spazi e trattini\n      const cleanedNumber = italianMobileWithoutPrefix[0].replace(/[\\s-]/g, '');\n      return cleanedNumber;\n    }\n  }\n  return null;\n}\nexport const getTelefono = async text => {\n  const phoneNumber = extractPhoneNumber(text);\n  return new Paragraph({\n    alignment: \"left\",\n    children: [new TextRun(`Telefono: ${phoneNumber ? phoneNumber : \"Non trovato\"}`)]\n  });\n};","map":{"version":3,"names":["Paragraph","TextRun","extractPhoneNumber","text","keywords","keywordRegex","RegExp","join","matchKeyword","match","startIdx","index","length","slicedText","slice","italianMobileWithPrefix","cleanedNumber","replace","italianMobileWithoutPrefix","getTelefono","phoneNumber","alignment","children"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/1FPersonaInf/FGetTelefono/fGetTelefono.jsx"],"sourcesContent":["import { Paragraph, TextRun } from 'docx';\nfunction extractPhoneNumber(text) {\n    const keywords = [\"telefono\", \"tel\", \"cell\", \"mobile\"];\n    const keywordRegex = new RegExp(`(${keywords.join(\"|\")})[:\\\\s]*`, \"i\");\n\n    // Estrai potenziale numero dopo la parola chiave\n    const matchKeyword = text.match(keywordRegex);\n    if (matchKeyword) {\n        const startIdx = matchKeyword.index + matchKeyword[0].length;\n        const slicedText = text.slice(startIdx);\n\n        // Verifica la presenza di +39 e successivamente verifica se ci sono 10 cifre\n        const italianMobileWithPrefix = slicedText.match(/\\+39[\\s-]*(\\d[\\s-]*){10}/);\n        if (italianMobileWithPrefix) {\n            // Rimuovi spazi e trattini, quindi combina con +39\n            const cleanedNumber = italianMobileWithPrefix[0].replace(/[\\s-]/g, '');\n            return cleanedNumber;\n        }\n\n        // Se non trova +39, verifica se ci sono solo 10 cifre\n        const italianMobileWithoutPrefix = slicedText.match(/(\\d[\\s-]*){10}/);\n        if (italianMobileWithoutPrefix) {\n            // Rimuovi spazi e trattini\n            const cleanedNumber = italianMobileWithoutPrefix[0].replace(/[\\s-]/g, '');\n            return cleanedNumber;\n        }\n    }\n\n    return null;\n}\n\n\nexport const getTelefono = async (text) => {\n    const phoneNumber = extractPhoneNumber(text);\n    return new Paragraph({\n        alignment: \"left\",\n        children: [\n            new TextRun(`Telefono: ${phoneNumber ? phoneNumber : \"Non trovato\"}`)\n        ]\n    });\n}"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,MAAM;AACzC,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAC9B,MAAMC,QAAQ,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;EACtD,MAAMC,YAAY,GAAG,IAAIC,MAAM,CAAE,IAAGF,QAAQ,CAACG,IAAI,CAAC,GAAG,CAAE,UAAS,EAAE,GAAG,CAAC;;EAEtE;EACA,MAAMC,YAAY,GAAGL,IAAI,CAACM,KAAK,CAACJ,YAAY,CAAC;EAC7C,IAAIG,YAAY,EAAE;IACd,MAAME,QAAQ,GAAGF,YAAY,CAACG,KAAK,GAAGH,YAAY,CAAC,CAAC,CAAC,CAACI,MAAM;IAC5D,MAAMC,UAAU,GAAGV,IAAI,CAACW,KAAK,CAACJ,QAAQ,CAAC;;IAEvC;IACA,MAAMK,uBAAuB,GAAGF,UAAU,CAACJ,KAAK,CAAC,0BAA0B,CAAC;IAC5E,IAAIM,uBAAuB,EAAE;MACzB;MACA,MAAMC,aAAa,GAAGD,uBAAuB,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;MACtE,OAAOD,aAAa;IACxB;;IAEA;IACA,MAAME,0BAA0B,GAAGL,UAAU,CAACJ,KAAK,CAAC,gBAAgB,CAAC;IACrE,IAAIS,0BAA0B,EAAE;MAC5B;MACA,MAAMF,aAAa,GAAGE,0BAA0B,CAAC,CAAC,CAAC,CAACD,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;MACzE,OAAOD,aAAa;IACxB;EACJ;EAEA,OAAO,IAAI;AACf;AAGA,OAAO,MAAMG,WAAW,GAAG,MAAOhB,IAAI,IAAK;EACvC,MAAMiB,WAAW,GAAGlB,kBAAkB,CAACC,IAAI,CAAC;EAC5C,OAAO,IAAIH,SAAS,CAAC;IACjBqB,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,CACN,IAAIrB,OAAO,CAAE,aAAYmB,WAAW,GAAGA,WAAW,GAAG,aAAc,EAAC,CAAC;EAE7E,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}