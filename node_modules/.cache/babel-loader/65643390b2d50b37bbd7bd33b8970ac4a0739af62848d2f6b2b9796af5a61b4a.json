{"ast":null,"code":"var _jsxFileName = \"/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/WordTemplate/PdfViewer2/pdfViewer2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as pdfjs from 'pdfjs-dist';\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\nimport { Packer, Document as DocxJS, Paragraph } from 'docx';\nimport \"./pdfViewer2.css\";\nimport PdfDownload2 from './PdfDownload2/pdfDownload2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\nconst phoneNumberRegex = /\\+?\\d{1,4}?[-.\\s]?\\(?(\\d{1,3}?)\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/g;\nconst PdfViewer2 = ({\n  filePdf2,\n  fileWord2\n}) => {\n  _s();\n  const [wordBlob, setWordBlob] = useState(\"\");\n  const blobToString = async blob => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = function () {\n        resolve(reader.result);\n      };\n      reader.onerror = reject;\n      reader.readAsText(blob);\n    });\n  };\n  const extractPhoneNumberFromPdf = async pdfFile => {\n    const arrayBuffer = await pdfFile.arrayBuffer();\n    const pdf = await pdfjs.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let combinedText = '';\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const textContent = await page.getTextContent();\n      combinedText += textContent.items.map(item => item.str).join(' ') + '\\n\\n';\n    }\n    const matches = combinedText.match(phoneNumberRegex);\n    return matches ? matches[0] : null;\n  };\n\n  // async function createDocument(pdfText, wordText) {\n  //     if (typeof wordText !== \"string\") {\n  //         console.error(\"wordText non è una stringa:\", wordText);\n  //         return;\n  //     }\n\n  //     const matches = pdfText.match(phoneNumberRegex);\n  //     const detectedPhoneNumber = matches ? matches[0] : null;\n  //     console.log(\"Numero di telefono rilevato:\", detectedPhoneNumber);\n\n  //     const lines = wordText.split('\\n');\n  //     const paragraphs = lines.map(line => new Paragraph(line));\n\n  //     // Trova l'indice del paragrafo \"SEZIONEA\" usando indexOf\n  //     const indexSEZIONEA = lines.findIndex(line => line.indexOf('SEZIONEA') !== -1);\n\n  //     if (indexSEZIONEA !== -1 && detectedPhoneNumber) {\n  //         // Inserisci il numero di telefono come un nuovo paragrafo subito dopo \"SEZIONEA\"\n  //         paragraphs.splice(indexSEZIONEA + 1, 0, new Paragraph(detectedPhoneNumber));\n  //     } else {\n  //         // Se \"{{SEZIONEA}}\" non viene trovato, sostituisci \"{{SEZIONEA}}\" con il numero di telefono\n  //         wordText = wordText.replace('SEZIONEA', detectedPhoneNumber);\n  //     }\n\n  //     const doc = new DocxJS({\n  //         title: 'Documento Modificato',\n  //         creator: 'Me',\n  //         description: 'Documento con numero di telefono aggiunto',\n  //         sections: [{\n  //             children: paragraphs,\n  //         }]\n  //     });\n  //     const blob = await Packer.toBlob(doc);\n  //     setWordBlob(blob);\n  // }\n\n  async function createDocument(pdfText, wordText) {\n    if (typeof wordText !== \"string\") {\n      console.error(\"wordText non è una stringa:\", wordText);\n      return;\n    }\n    const matches = pdfText.match(phoneNumberRegex);\n    const detectedPhoneNumber = matches ? matches[0] : null;\n    console.log(\"Numero di telefono rilevato:\", detectedPhoneNumber);\n    if (detectedPhoneNumber) {\n      // Dividi il testo del documento Word in paragrafi\n      const paragraphs = wordText.split('\\n').map(line => new Paragraph(line));\n\n      // Aggiungi il numero di telefono come nuovo paragrafo\n      paragraphs.push(new Paragraph(detectedPhoneNumber));\n\n      // Crea il documento Word\n      const doc = new DocxJS({\n        title: 'Documento Modificato',\n        creator: 'Me',\n        description: 'Documento con numero di telefono aggiunto',\n        sections: [{\n          children: paragraphs\n        }]\n      });\n      const blob = await Packer.toBlob(doc);\n      setWordBlob(blob);\n    }\n  }\n  useEffect(() => {\n    if (filePdf2) {\n      extractPhoneNumberFromPdf(filePdf2).then(async pdfText => {\n        const wordText = await blobToString(fileWord2);\n        createDocument(pdfText, wordText).catch(error => {\n          console.error(\"Errore nella creazione del documento:\", error);\n        });\n      });\n    }\n    // eslint-disable-next-line \n  }, [filePdf2]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border border-gray-300 p-2 shadow-md overflow-hidden\",\n    style: {\n      maxHeight: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(PdfDownload2, {\n      wordBlob: wordBlob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n_s(PdfViewer2, \"mFs2NPRYda0raMXEkkE69etay/M=\");\n_c = PdfViewer2;\nexport default PdfViewer2;\nvar _c;\n$RefreshReg$(_c, \"PdfViewer2\");","map":{"version":3,"names":["React","useState","useEffect","pdfjs","pdfjsWorker","Packer","Document","DocxJS","Paragraph","PdfDownload2","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","phoneNumberRegex","PdfViewer2","filePdf2","fileWord2","_s","wordBlob","setWordBlob","blobToString","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsText","extractPhoneNumberFromPdf","pdfFile","arrayBuffer","pdf","getDocument","data","promise","combinedText","i","numPages","page","getPage","textContent","getTextContent","items","map","item","str","join","matches","match","createDocument","pdfText","wordText","console","error","detectedPhoneNumber","log","paragraphs","split","line","push","doc","title","creator","description","sections","children","toBlob","then","catch","className","style","maxHeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/WordTemplate/PdfViewer2/pdfViewer2.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as pdfjs from 'pdfjs-dist';\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\nimport { Packer, Document as DocxJS, Paragraph } from 'docx';\nimport \"./pdfViewer2.css\";\nimport PdfDownload2 from './PdfDownload2/pdfDownload2';\n\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\nconst phoneNumberRegex = /\\+?\\d{1,4}?[-.\\s]?\\(?(\\d{1,3}?)\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/g;\n\nconst PdfViewer2 = ({ filePdf2, fileWord2 }) => {\n    const [wordBlob, setWordBlob] = useState(\"\");\n\n    const blobToString = async (blob) => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = function () {\n                resolve(reader.result);\n            };\n            reader.onerror = reject;\n            reader.readAsText(blob);\n        });\n    };\n\n    const extractPhoneNumberFromPdf = async (pdfFile) => {\n        const arrayBuffer = await pdfFile.arrayBuffer();\n        const pdf = await pdfjs.getDocument({ data: arrayBuffer }).promise;\n        let combinedText = '';\n\n        for (let i = 1; i <= pdf.numPages; i++) {\n            const page = await pdf.getPage(i);\n            const textContent = await page.getTextContent();\n            combinedText += textContent.items.map(item => item.str).join(' ') + '\\n\\n';\n        }\n\n        const matches = combinedText.match(phoneNumberRegex);\n        return matches ? matches[0] : null;\n    };\n\n\n    // async function createDocument(pdfText, wordText) {\n    //     if (typeof wordText !== \"string\") {\n    //         console.error(\"wordText non è una stringa:\", wordText);\n    //         return;\n    //     }\n\n    //     const matches = pdfText.match(phoneNumberRegex);\n    //     const detectedPhoneNumber = matches ? matches[0] : null;\n    //     console.log(\"Numero di telefono rilevato:\", detectedPhoneNumber);\n\n    //     const lines = wordText.split('\\n');\n    //     const paragraphs = lines.map(line => new Paragraph(line));\n\n    //     // Trova l'indice del paragrafo \"SEZIONEA\" usando indexOf\n    //     const indexSEZIONEA = lines.findIndex(line => line.indexOf('SEZIONEA') !== -1);\n\n    //     if (indexSEZIONEA !== -1 && detectedPhoneNumber) {\n    //         // Inserisci il numero di telefono come un nuovo paragrafo subito dopo \"SEZIONEA\"\n    //         paragraphs.splice(indexSEZIONEA + 1, 0, new Paragraph(detectedPhoneNumber));\n    //     } else {\n    //         // Se \"{{SEZIONEA}}\" non viene trovato, sostituisci \"{{SEZIONEA}}\" con il numero di telefono\n    //         wordText = wordText.replace('SEZIONEA', detectedPhoneNumber);\n    //     }\n\n    //     const doc = new DocxJS({\n    //         title: 'Documento Modificato',\n    //         creator: 'Me',\n    //         description: 'Documento con numero di telefono aggiunto',\n    //         sections: [{\n    //             children: paragraphs,\n    //         }]\n    //     });\n    //     const blob = await Packer.toBlob(doc);\n    //     setWordBlob(blob);\n    // }\n\n\n\n    async function createDocument(pdfText, wordText) {\n        if (typeof wordText !== \"string\") {\n            console.error(\"wordText non è una stringa:\", wordText);\n            return;\n        }\n\n        const matches = pdfText.match(phoneNumberRegex);\n        const detectedPhoneNumber = matches ? matches[0] : null;\n        console.log(\"Numero di telefono rilevato:\", detectedPhoneNumber);\n\n        if (detectedPhoneNumber) {\n            // Dividi il testo del documento Word in paragrafi\n            const paragraphs = wordText.split('\\n').map(line => new Paragraph(line));\n\n            // Aggiungi il numero di telefono come nuovo paragrafo\n            paragraphs.push(new Paragraph(detectedPhoneNumber));\n\n            // Crea il documento Word\n            const doc = new DocxJS({\n                title: 'Documento Modificato',\n                creator: 'Me',\n                description: 'Documento con numero di telefono aggiunto',\n                sections: [{\n                    children: paragraphs,\n                }]\n            });\n\n            const blob = await Packer.toBlob(doc);\n            setWordBlob(blob);\n        }\n    }\n\n\n\n\n\n\n\n\n    useEffect(() => {\n        if (filePdf2) {\n            extractPhoneNumberFromPdf(filePdf2).then(async pdfText => {\n                const wordText = await blobToString(fileWord2);\n                createDocument(pdfText, wordText).catch(error => {\n                    console.error(\"Errore nella creazione del documento:\", error);\n                });\n            });\n        }\n        // eslint-disable-next-line \n    }, [filePdf2]);\n\n    return (\n        <div className=\"border border-gray-300 p-2 shadow-md overflow-hidden\" style={{ maxHeight: '100vh' }}>\n            <PdfDownload2 wordBlob={wordBlob} />\n        </div>\n    );\n}\n\nexport default PdfViewer2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}