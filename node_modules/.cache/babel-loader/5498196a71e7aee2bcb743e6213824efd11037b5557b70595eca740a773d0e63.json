{"ast":null,"code":"var _jsxFileName = \"/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/LogViewer/logViewer.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogViewer = ({\n  sections\n}) => {\n  // Controllo se 'sections' è un array. Se non lo è, mostra un messaggio di errore o null.\n  if (!Array.isArray(sections)) {\n    console.error('sections is not an array', sections);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Le sezioni non sono disponibili.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: sections.map((section, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Sezione \", section.sectionNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: Array.isArray(section.content) ? section.content.join(' ') : section.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n_c = LogViewer;\nexport default LogViewer;\nvar _c;\n$RefreshReg$(_c, \"LogViewer\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","LogViewer","sections","Array","isArray","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","section","index","sectionNumber","content","join","_c","$RefreshReg$"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/LogViewer/logViewer.jsx"],"sourcesContent":["import React from 'react';\n\nconst LogViewer = ({ sections }) => {\n    // Controllo se 'sections' è un array. Se non lo è, mostra un messaggio di errore o null.\n    if (!Array.isArray(sections)) {\n        console.error('sections is not an array', sections);\n        return <div>Le sezioni non sono disponibili.</div>;\n    }\n\n    return (\n        <div>\n            {sections.map((section, index) => (\n                <div key={index}>\n                    <h2>Sezione {section.sectionNumber}</h2>\n                    <p>{Array.isArray(section.content) ? section.content.join(' ') : section.content}</p>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default LogViewer;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAChC;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;IAC1BG,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEJ,QAAQ,CAAC;IACnD,oBAAOF,OAAA;MAAAO,QAAA,EAAK;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtD;EAEA,oBACIX,OAAA;IAAAO,QAAA,EACKL,QAAQ,CAACU,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACzBd,OAAA;MAAAO,QAAA,gBACIP,OAAA;QAAAO,QAAA,GAAI,UAAQ,EAACM,OAAO,CAACE,aAAa;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxCX,OAAA;QAAAO,QAAA,EAAIJ,KAAK,CAACC,OAAO,CAACS,OAAO,CAACG,OAAO,CAAC,GAAGH,OAAO,CAACG,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,GAAGJ,OAAO,CAACG;MAAO;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAF/EG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACO,EAAA,GAjBIjB,SAAS;AAmBf,eAAeA,SAAS;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}