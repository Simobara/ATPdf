{"ast":null,"code":"import { Paragraph, TextRun } from 'docx';\n// import nlp from 'compromise';\n\nconst removeAccents = str => {\n  return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n};\nexport const getDob = text => {\n  // Parole chiave per identificare la sezione di dati personali\n  const sectionKeywords = [\"informazioni personali\", \"dati personali\", \"personal information\", \"personal details\"];\n  // Parole chiave per identificare la data di nascita o età\n  const keywords = [\"data di nascita\", \"nato il\", \"nata il\", \"nascita\", \"compleanno\", \"eta\", \"age\"];\n  let dob = null;\n  const normalizedText = removeAccents(text.toLowerCase());\n  const findPersonalSection = () => {\n    for (const keyword of sectionKeywords) {\n      if (normalizedText.includes(removeAccents(keyword.toLowerCase()))) {\n        return true;\n      }\n    }\n    return false;\n  };\n  if (findPersonalSection()) {\n    for (const keyword of keywords) {\n      const normalizedKeyword = removeAccents(keyword.toLowerCase());\n      if (normalizedText.includes(normalizedKeyword)) {\n        // Estrai la data o l'età dalla stessa riga\n        const line = normalizedText.split('\\n').find(line => line.includes(normalizedKeyword));\n        const dateMatch = line.match(/\\b(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})\\b/);\n        if (dateMatch) {\n          dob = dateMatch[1];\n          break;\n        } else {\n          const ageMatch = line.match(/\\b(eta|age)\\s*:\\s*(\\d{2})\\b/);\n          if (ageMatch && parseInt(ageMatch[2], 10) >= 16 && parseInt(ageMatch[2], 10) <= 60) {\n            dob = ageMatch[1] === \"age\" ? `Age: ${ageMatch[2]}` : `Età: ${ageMatch[2]}`;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  // Se non abbiamo trovato né la data di nascita né l'età, usiamo \"/\"\n  if (!dob) {\n    dob = \"/\";\n  }\n\n  // Costruzione del paragrafo finale\n  let finalText = `Data di nascita: ${dob}`;\n  return new Paragraph({\n    alignment: \"left\",\n    children: [new TextRun(finalText)]\n  });\n};","map":{"version":3,"names":["Paragraph","TextRun","removeAccents","str","normalize","replace","getDob","text","sectionKeywords","keywords","dob","normalizedText","toLowerCase","findPersonalSection","keyword","includes","normalizedKeyword","line","split","find","dateMatch","match","ageMatch","parseInt","finalText","alignment","children"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/1FPersonaInf/2FGetDob/fGetDob.jsx"],"sourcesContent":["import { Paragraph, TextRun } from 'docx';\n// import nlp from 'compromise';\n\nconst removeAccents = (str) => {\n    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n}\n\nexport const getDob = (text) => {\n    // Parole chiave per identificare la sezione di dati personali\n    const sectionKeywords = [\"informazioni personali\", \"dati personali\", \"personal information\", \"personal details\"];\n    // Parole chiave per identificare la data di nascita o età\n    const keywords = [\"data di nascita\", \"nato il\", \"nata il\", \"nascita\", \"compleanno\", \"eta\", \"age\"];\n\n    let dob = null;\n    const normalizedText = removeAccents(text.toLowerCase());\n\n    const findPersonalSection = () => {\n        for (const keyword of sectionKeywords) {\n            if (normalizedText.includes(removeAccents(keyword.toLowerCase()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    if (findPersonalSection()) {\n        for (const keyword of keywords) {\n            const normalizedKeyword = removeAccents(keyword.toLowerCase());\n            if (normalizedText.includes(normalizedKeyword)) {\n                // Estrai la data o l'età dalla stessa riga\n                const line = normalizedText.split('\\n').find(line => line.includes(normalizedKeyword));\n                const dateMatch = line.match(/\\b(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})\\b/);\n                if (dateMatch) {\n                    dob = dateMatch[1];\n                    break;\n                } else {\n                    const ageMatch = line.match(/\\b(eta|age)\\s*:\\s*(\\d{2})\\b/);\n                    if (ageMatch && parseInt(ageMatch[2], 10) >= 16 && parseInt(ageMatch[2], 10) <= 60) {\n                        dob = ageMatch[1] === \"age\" ? `Age: ${ageMatch[2]}` : `Età: ${ageMatch[2]}`;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    // Se non abbiamo trovato né la data di nascita né l'età, usiamo \"/\"\n    if (!dob) {\n        dob = \"/\";\n    }\n\n    // Costruzione del paragrafo finale\n    let finalText = `Data di nascita: ${dob}`;\n\n    return new Paragraph({\n        alignment: \"left\",\n        children: [\n            new TextRun(finalText)\n        ]\n    });\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,MAAM;AACzC;;AAEA,MAAMC,aAAa,GAAIC,GAAG,IAAK;EAC3B,OAAOA,GAAG,CAACC,SAAS,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;AAC/D,CAAC;AAED,OAAO,MAAMC,MAAM,GAAIC,IAAI,IAAK;EAC5B;EACA,MAAMC,eAAe,GAAG,CAAC,wBAAwB,EAAE,gBAAgB,EAAE,sBAAsB,EAAE,kBAAkB,CAAC;EAChH;EACA,MAAMC,QAAQ,GAAG,CAAC,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,CAAC;EAEjG,IAAIC,GAAG,GAAG,IAAI;EACd,MAAMC,cAAc,GAAGT,aAAa,CAACK,IAAI,CAACK,WAAW,CAAC,CAAC,CAAC;EAExD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAC9B,KAAK,MAAMC,OAAO,IAAIN,eAAe,EAAE;MACnC,IAAIG,cAAc,CAACI,QAAQ,CAACb,aAAa,CAACY,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;QAC/D,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EAED,IAAIC,mBAAmB,CAAC,CAAC,EAAE;IACvB,KAAK,MAAMC,OAAO,IAAIL,QAAQ,EAAE;MAC5B,MAAMO,iBAAiB,GAAGd,aAAa,CAACY,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC;MAC9D,IAAID,cAAc,CAACI,QAAQ,CAACC,iBAAiB,CAAC,EAAE;QAC5C;QACA,MAAMC,IAAI,GAAGN,cAAc,CAACO,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAACF,IAAI,IAAIA,IAAI,CAACF,QAAQ,CAACC,iBAAiB,CAAC,CAAC;QACtF,MAAMI,SAAS,GAAGH,IAAI,CAACI,KAAK,CAAC,qCAAqC,CAAC;QACnE,IAAID,SAAS,EAAE;UACXV,GAAG,GAAGU,SAAS,CAAC,CAAC,CAAC;UAClB;QACJ,CAAC,MAAM;UACH,MAAME,QAAQ,GAAGL,IAAI,CAACI,KAAK,CAAC,6BAA6B,CAAC;UAC1D,IAAIC,QAAQ,IAAIC,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,IAAIC,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;YAChFZ,GAAG,GAAGY,QAAQ,CAAC,CAAC,CAAC,KAAK,KAAK,GAAI,QAAOA,QAAQ,CAAC,CAAC,CAAE,EAAC,GAAI,QAAOA,QAAQ,CAAC,CAAC,CAAE,EAAC;YAC3E;UACJ;QACJ;MACJ;IACJ;EACJ;;EAEA;EACA,IAAI,CAACZ,GAAG,EAAE;IACNA,GAAG,GAAG,GAAG;EACb;;EAEA;EACA,IAAIc,SAAS,GAAI,oBAAmBd,GAAI,EAAC;EAEzC,OAAO,IAAIV,SAAS,CAAC;IACjByB,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,CACN,IAAIzB,OAAO,CAACuB,SAAS,CAAC;EAE9B,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}