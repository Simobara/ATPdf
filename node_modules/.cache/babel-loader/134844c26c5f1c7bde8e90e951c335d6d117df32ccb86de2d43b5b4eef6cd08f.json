{"ast":null,"code":"import { Paragraph, TextRun } from 'docx';\nconst extractEspLav = origText => {\n  // const keywords = [\"telefono\", \"tel\", \"cell\", \"mobile\"];\n  // const keywordRegex = new RegExp(`(${keywords.join(\"|\")})[:\\\\s]*`, \"i\");\n  // const matchKeyword = origText.match(keywordRegex);// Estrai potenziale numero dopo la parola chiave\n  // if (matchKeyword) {\n  //     const startIdx = matchKeyword.index + matchKeyword[0].length;\n  //     const slicedText = origText.slice(startIdx);\n  //     const italianMobileWithPrefix = slicedText.match(/\\+39[\\s-]*(\\d[\\s-]*){10}/);// Verifica la presenza di +39 e success verifica se ci sono 10 cifre\n  //     if (italianMobileWithPrefix) {\n  //         const cleanedNumber = italianMobileWithPrefix[0].replace(/[\\s-]/g, '');// Rimuovi spazi e trattini, quindi combina con +39\n  //         return cleanedNumber;\n  //     }\n  //     const italianMobileWithoutPrefix = slicedText.match(/(\\d[\\s-]*){10}/);// Se non trova +39, verifica se ci sono solo 10 cifre\n  //     if (italianMobileWithoutPrefix) {\n  //         const cleanedNumber = italianMobileWithoutPrefix[0].replace(/[\\s-]/g, '');// Rimuovi spazi e trattini\n  //         return cleanedNumber;\n  //     }\n  // }\n  return null;\n};\nexport const getEspLav = async origText => {\n  const espLav = extractEspLav(origText);\n  return new Paragraph({\n    alignment: \"left\",\n    children: [new TextRun(`Esperienze Lavorative: ${espLav ? espLav : \" / \"}`)]\n  });\n};","map":{"version":3,"names":["Paragraph","TextRun","extractEspLav","origText","getEspLav","espLav","alignment","children"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/2EsperienzeLavorativ/esperienzeLavorative.jsx"],"sourcesContent":["import { Paragraph, TextRun } from 'docx';\n\nconst extractEspLav = (origText) => {\n    // const keywords = [\"telefono\", \"tel\", \"cell\", \"mobile\"];\n    // const keywordRegex = new RegExp(`(${keywords.join(\"|\")})[:\\\\s]*`, \"i\");\n    // const matchKeyword = origText.match(keywordRegex);// Estrai potenziale numero dopo la parola chiave\n    // if (matchKeyword) {\n    //     const startIdx = matchKeyword.index + matchKeyword[0].length;\n    //     const slicedText = origText.slice(startIdx);\n    //     const italianMobileWithPrefix = slicedText.match(/\\+39[\\s-]*(\\d[\\s-]*){10}/);// Verifica la presenza di +39 e success verifica se ci sono 10 cifre\n    //     if (italianMobileWithPrefix) {\n    //         const cleanedNumber = italianMobileWithPrefix[0].replace(/[\\s-]/g, '');// Rimuovi spazi e trattini, quindi combina con +39\n    //         return cleanedNumber;\n    //     }\n    //     const italianMobileWithoutPrefix = slicedText.match(/(\\d[\\s-]*){10}/);// Se non trova +39, verifica se ci sono solo 10 cifre\n    //     if (italianMobileWithoutPrefix) {\n    //         const cleanedNumber = italianMobileWithoutPrefix[0].replace(/[\\s-]/g, '');// Rimuovi spazi e trattini\n    //         return cleanedNumber;\n    //     }\n    // }\n    return null;\n}\n\n\n\nexport const getEspLav = async (origText) => {\n    const espLav = extractEspLav(origText);\n    return new Paragraph({\n        alignment: \"left\",\n        children: [\n            new TextRun(`Esperienze Lavorative: ${espLav ? espLav : \" / \"}`)\n        ]\n    });\n}"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,MAAM;AAEzC,MAAMC,aAAa,GAAIC,QAAQ,IAAK;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,IAAI;AACf,CAAC;AAID,OAAO,MAAMC,SAAS,GAAG,MAAOD,QAAQ,IAAK;EACzC,MAAME,MAAM,GAAGH,aAAa,CAACC,QAAQ,CAAC;EACtC,OAAO,IAAIH,SAAS,CAAC;IACjBM,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,CACN,IAAIN,OAAO,CAAE,0BAAyBI,MAAM,GAAGA,MAAM,GAAG,KAAM,EAAC,CAAC;EAExE,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}