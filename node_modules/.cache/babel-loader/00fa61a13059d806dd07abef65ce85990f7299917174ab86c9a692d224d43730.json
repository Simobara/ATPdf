{"ast":null,"code":"import { Paragraph, TextRun } from 'docx';\nimport nlp from 'compromise';\nconst keywords = [\"affiliation\", \"allegiance\", \"appartenenza\", \"belongingness\", \"cittadinanza\", \"citizenship\", \"civics\", \"cultura\", \"enfranchisement\", \"etnia\", \"identità\", \"membership\", \"national identity\", \"nationality\", \"naturalization\", \"origine\", \"patriotism\", \"provenienza\", \"razza\"];\nconst nationalities = [\"American\", \"Andorran\", \"Australian\", \"Austrian\", \"Basque\", \"Belgian\", \"Breton\", \"British\", \"Canadian\", \"Catalan\", \"Corsican\", \"Cypriot\", \"Danish\", \"Dutch\", \"Faroese\", \"Finnish\", \"French\", \"German\", \"Greek\", \"Guernsey\", \"Icelandic\", \"Irish\", \"Italian\", \"Jersey\", \"Liechtensteiner\", \"Luxembourger\", \"Maltese\", \"Manx\", \"Monégasque\", \"New Zealander\", \"Northern Irish\", \"Norwegian\", \"Portuguese\", \"San Marinese\", \"Scottish\", \"Spanish\", \"Swedish\", \"Swiss\", \"Vatican\", \"Welsh\"];\nconst nazionalitaMaschile = [\"Americano\", \"Andorrano\", \"Australiano\", \"Austriaco\", \"Basco\", \"Belga\", \"Bretone\", \"Britannico\", \"Canadese\", \"Catalano\", \"Corso\", \"Cipriota\", \"Danese\", \"Olandese\", \"Faroese\", \"Finlandese\", \"Francese\", \"Tedesco\", \"Greco\", \"Guernsey\", \"Islandese\", \"Irlandese\", \"Italiano\", \"Jersista\", \"Liechtensteinese\", \"Lussemburghese\", \"Maltese\", \"Manxese\", \"Monegasco\", \"Neo-zelandese\", \"Nord-irlandese\", \"Norvegese\", \"Portoghese\", \"Sammarinese\", \"Scozzese\", \"Spagnolo\", \"Svedese\", \"Svizzero\", \"Vaticanense\", \"Gallese\"];\nconst nazionalitaFemminile = [\"Americana\", \"Andorrana\", \"Australiana\", \"Austriaca\", \"Basca\", \"Belga\", \"Bretone\", \"Britannica\", \"Canadese\", \"Catalana\", \"Corsa\", \"Cipriota\", \"Danese\", \"Olandese\", \"Faroese\", \"Finlandese\", \"Francese\", \"Tedesca\", \"Greca\", \"Guernsey\", \"Islandese\", \"Irlandese\", \"Italiana\", \"Jersista\", \"Liechtensteinese\", \"Lussemburghese\", \"Maltese\", \"Manxese\", \"Monegasca\", \"Neo-zelandese\", \"Nord-irlandese\", \"Norvegese\", \"Portoghese\", \"Sammarinese\", \"Scozzese\", \"Spagnola\", \"Svedese\", \"Svizzera\", \"Vaticanense\", \"Gallese\"];\nconst extractNazionalitaWithNLP = text => {\n  const allNationalities = [...nationalities, ...nazionalitaMaschile, ...nazionalitaFemminile];\n  const foundNations = [];\n  allNationalities.forEach(nation => {\n    if (nlp(text).match(nation).found) {\n      foundNations.push(nation);\n    }\n  });\n  return foundNations.length > 0 ? foundNations.join(\"-\") : null;\n};\nconst extractNazionalita = origText => {\n  const isSimilarNation = word => {\n    const firstFourLetters = word.substring(0, 4).toLowerCase();\n    const allNationalities = [...nationalities, ...nazionalitaMaschile, ...nazionalitaFemminile];\n    return allNationalities.some(nation => nation.toLowerCase().startsWith(firstFourLetters));\n  };\n  const regex = new RegExp(`\\\\b(${keywords.join(\"|\")})\\\\s+(\\\\w+)`, \"ig\");\n  let foundNazionalities = [];\n  let match = regex.exec(origText);\n  while (match !== null) {\n    const possibleNation = match[2];\n    if (nationalities.includes(possibleNation) || nazionalitaMaschile.includes(possibleNation) || nazionalitaFemminile.includes(possibleNation) || isSimilarNation(possibleNation)) {\n      foundNazionalities.push(possibleNation);\n    }\n    match = regex.exec(origText);\n  }\n  return foundNazionalities.length > 0 ? foundNazionalities.join(\"-\") : null;\n};\nexport const getNaz = async origText => {\n  let nazionalita = await extractNazionalita(origText);\n  if (!nazionalita) {\n    nazionalita = extractNazionalitaWithNLP(origText);\n  }\n  return new Paragraph({\n    alignment: \"left\",\n    children: [new TextRun(`Nazionalità: ${nazionalita ? nazionalita : \"Italiana\"}`)]\n  });\n};","map":{"version":3,"names":["Paragraph","TextRun","nlp","keywords","nationalities","nazionalitaMaschile","nazionalitaFemminile","extractNazionalitaWithNLP","text","allNationalities","foundNations","forEach","nation","match","found","push","length","join","extractNazionalita","origText","isSimilarNation","word","firstFourLetters","substring","toLowerCase","some","startsWith","regex","RegExp","foundNazionalities","exec","possibleNation","includes","getNaz","nazionalita","alignment","children"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/1PersonaInf/3GetNazionalita/getNazionalita.jsx"],"sourcesContent":["import { Paragraph, TextRun } from 'docx';\nimport nlp from 'compromise';\n\nconst keywords = [\n    \"affiliation\", \"allegiance\", \"appartenenza\", \"belongingness\", \"cittadinanza\", \"citizenship\", \"civics\", \"cultura\", \"enfranchisement\", \"etnia\", \"identità\", \"membership\", \"national identity\", \"nationality\", \"naturalization\", \"origine\", \"patriotism\", \"provenienza\", \"razza\"\n];\nconst nationalities = [\n    \"American\", \"Andorran\", \"Australian\", \"Austrian\", \"Basque\", \"Belgian\", \"Breton\", \"British\", \"Canadian\", \"Catalan\", \"Corsican\", \"Cypriot\", \"Danish\", \"Dutch\", \"Faroese\", \"Finnish\", \"French\", \"German\", \"Greek\", \"Guernsey\", \"Icelandic\", \"Irish\", \"Italian\", \"Jersey\", \"Liechtensteiner\", \"Luxembourger\", \"Maltese\", \"Manx\", \"Monégasque\", \"New Zealander\", \"Northern Irish\", \"Norwegian\", \"Portuguese\", \"San Marinese\", \"Scottish\", \"Spanish\", \"Swedish\", \"Swiss\", \"Vatican\", \"Welsh\"\n];\nconst nazionalitaMaschile = [\n    \"Americano\", \"Andorrano\", \"Australiano\", \"Austriaco\", \"Basco\", \"Belga\", \"Bretone\", \"Britannico\", \"Canadese\", \"Catalano\", \"Corso\", \"Cipriota\", \"Danese\", \"Olandese\", \"Faroese\", \"Finlandese\", \"Francese\", \"Tedesco\", \"Greco\", \"Guernsey\", \"Islandese\", \"Irlandese\", \"Italiano\", \"Jersista\", \"Liechtensteinese\", \"Lussemburghese\", \"Maltese\", \"Manxese\", \"Monegasco\", \"Neo-zelandese\", \"Nord-irlandese\", \"Norvegese\", \"Portoghese\", \"Sammarinese\", \"Scozzese\", \"Spagnolo\", \"Svedese\", \"Svizzero\", \"Vaticanense\", \"Gallese\"\n];\nconst nazionalitaFemminile = [\n    \"Americana\", \"Andorrana\", \"Australiana\", \"Austriaca\", \"Basca\", \"Belga\", \"Bretone\", \"Britannica\", \"Canadese\", \"Catalana\", \"Corsa\", \"Cipriota\", \"Danese\", \"Olandese\", \"Faroese\", \"Finlandese\", \"Francese\", \"Tedesca\", \"Greca\", \"Guernsey\", \"Islandese\", \"Irlandese\", \"Italiana\", \"Jersista\", \"Liechtensteinese\", \"Lussemburghese\", \"Maltese\", \"Manxese\", \"Monegasca\", \"Neo-zelandese\", \"Nord-irlandese\", \"Norvegese\", \"Portoghese\", \"Sammarinese\", \"Scozzese\", \"Spagnola\", \"Svedese\", \"Svizzera\", \"Vaticanense\", \"Gallese\"\n];\n\n\nconst extractNazionalitaWithNLP = (text) => {\n    const allNationalities = [...nationalities, ...nazionalitaMaschile, ...nazionalitaFemminile];\n    const foundNations = [];\n    allNationalities.forEach(nation => {\n        if (nlp(text).match(nation).found) {\n            foundNations.push(nation);\n        }\n    });\n    return foundNations.length > 0 ? foundNations.join(\"-\") : null;\n}\n\n\nconst extractNazionalita = (origText) => {\n    const isSimilarNation = (word) => {\n        const firstFourLetters = word.substring(0, 4).toLowerCase();\n        const allNationalities = [...nationalities, ...nazionalitaMaschile, ...nazionalitaFemminile];\n        return allNationalities.some(nation => nation.toLowerCase().startsWith(firstFourLetters));\n    };\n    const regex = new RegExp(`\\\\b(${keywords.join(\"|\")})\\\\s+(\\\\w+)`, \"ig\");\n    let foundNazionalities = [];\n    let match = regex.exec(origText);\n    while (match !== null) {\n        const possibleNation = match[2];\n        if (nationalities.includes(possibleNation) ||\n            nazionalitaMaschile.includes(possibleNation) ||\n            nazionalitaFemminile.includes(possibleNation) ||\n            isSimilarNation(possibleNation)) {\n            foundNazionalities.push(possibleNation);\n        }\n        match = regex.exec(origText);\n    }\n    return foundNazionalities.length > 0 ? foundNazionalities.join(\"-\") : null;\n}\n\n\n\nexport const getNaz = async (origText) => {\n    let nazionalita = await extractNazionalita(origText);\n    if (!nazionalita) {\n        nazionalita = extractNazionalitaWithNLP(origText);\n    }\n    return new Paragraph({\n        alignment: \"left\",\n        children: [\n            new TextRun(`Nazionalità: ${nazionalita ? nazionalita : \"Italiana\"}`)\n        ]\n    });\n};\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}