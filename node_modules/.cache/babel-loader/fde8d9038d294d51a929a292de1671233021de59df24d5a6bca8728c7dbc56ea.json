{"ast":null,"code":"import { Paragraph, ImageRun, Header, Footer } from 'docx';\nimport ATLogoUp from '../../../../../../Assets/ATLogoUp.png';\nimport ATLogoDown from '../../../../../../Assets/ATLogoDown.png';\n\n// -----------------------------------------------------------------GET LOGO UP\nexport const getLogoUp = async () => {\n  const imageParagraph = new Paragraph({\n    alignment: \"right\",\n    children: [new ImageRun({\n      data: await (await fetch(ATLogoUp)).arrayBuffer(),\n      //Il primo await: Questo attende che la funzione fetch(ATLogoDown) sia completata. La funzione fetch restituisce una Promise che risolve con l'oggetto Response una volta che la richiesta HTTP è completata. Quindi, await fetch(ATLogoDown) restituirà un oggetto Response.\n      //Il secondo await: Dopo aver ottenuto l'oggetto Response, si chiama il metodo arrayBuffer() su di esso per ottenere i dati binari della risposta sotto forma di ArrayBuffer. Anche il metodo arrayBuffer() restituisce una Promise, che è il motivo per cui ce bisogno di un altro await per risolverla.\n      transformation: {\n        width: 250,\n        height: 100\n      }\n    })]\n  });\n  return new Header({\n    children: [imageParagraph]\n  });\n};\n// ------------------------------------------------------------------GET LOGO DOWN\nexport const getLogoDown = async () => {\n  const imageParagraph = new Paragraph({\n    alignment: \"left\",\n    children: [new ImageRun({\n      data: await (await fetch(ATLogoDown)).arrayBuffer(),\n      transformation: {\n        width: 250,\n        height: 100\n      }\n    })]\n  });\n  return new Footer({\n    children: [imageParagraph]\n  });\n};\n// ------------------------------------------------------------------","map":{"version":3,"names":["Paragraph","ImageRun","Header","Footer","ATLogoUp","ATLogoDown","getLogoUp","imageParagraph","alignment","children","data","fetch","arrayBuffer","transformation","width","height","getLogoDown"],"sources":["/Users/momimac/Desktop/ATPdf/src/Components/PdfDropZone/PdfViewer/FCreateDoc/FParagraphs/0GetsLogos/getLogos.jsx"],"sourcesContent":["import { Paragraph, ImageRun, Header, Footer } from 'docx';\nimport ATLogoUp from '../../../../../../Assets/ATLogoUp.png';\nimport ATLogoDown from '../../../../../../Assets/ATLogoDown.png';\n\n// -----------------------------------------------------------------GET LOGO UP\nexport const getLogoUp = async () => {\n    const imageParagraph = new Paragraph({\n        alignment: \"right\",\n        children: [\n            new ImageRun({\n                data: await (await fetch(ATLogoUp)).arrayBuffer(),\n                //Il primo await: Questo attende che la funzione fetch(ATLogoDown) sia completata. La funzione fetch restituisce una Promise che risolve con l'oggetto Response una volta che la richiesta HTTP è completata. Quindi, await fetch(ATLogoDown) restituirà un oggetto Response.\n                //Il secondo await: Dopo aver ottenuto l'oggetto Response, si chiama il metodo arrayBuffer() su di esso per ottenere i dati binari della risposta sotto forma di ArrayBuffer. Anche il metodo arrayBuffer() restituisce una Promise, che è il motivo per cui ce bisogno di un altro await per risolverla.\n                transformation: { width: 250, height: 100 }\n            })\n        ]\n    });\n    return new Header({ children: [imageParagraph] });\n}\n// ------------------------------------------------------------------GET LOGO DOWN\nexport const getLogoDown = async () => {\n    const imageParagraph = new Paragraph({\n        alignment: \"left\",\n        children: [\n            new ImageRun({\n                data: await (await fetch(ATLogoDown)).arrayBuffer(),\n                transformation: { width: 250, height: 100 }\n            })\n        ]\n    });\n    return new Footer({ children: [imageParagraph] });\n}\n// ------------------------------------------------------------------\n\n\n\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,QAAQ,MAAM;AAC1D,OAAOC,QAAQ,MAAM,uCAAuC;AAC5D,OAAOC,UAAU,MAAM,yCAAyC;;AAEhE;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,cAAc,GAAG,IAAIP,SAAS,CAAC;IACjCQ,SAAS,EAAE,OAAO;IAClBC,QAAQ,EAAE,CACN,IAAIR,QAAQ,CAAC;MACTS,IAAI,EAAE,MAAM,CAAC,MAAMC,KAAK,CAACP,QAAQ,CAAC,EAAEQ,WAAW,CAAC,CAAC;MACjD;MACA;MACAC,cAAc,EAAE;QAAEC,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI;IAC9C,CAAC,CAAC;EAEV,CAAC,CAAC;EACF,OAAO,IAAIb,MAAM,CAAC;IAAEO,QAAQ,EAAE,CAACF,cAAc;EAAE,CAAC,CAAC;AACrD,CAAC;AACD;AACA,OAAO,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMT,cAAc,GAAG,IAAIP,SAAS,CAAC;IACjCQ,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,CACN,IAAIR,QAAQ,CAAC;MACTS,IAAI,EAAE,MAAM,CAAC,MAAMC,KAAK,CAACN,UAAU,CAAC,EAAEO,WAAW,CAAC,CAAC;MACnDC,cAAc,EAAE;QAAEC,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI;IAC9C,CAAC,CAAC;EAEV,CAAC,CAAC;EACF,OAAO,IAAIZ,MAAM,CAAC;IAAEM,QAAQ,EAAE,CAACF,cAAc;EAAE,CAAC,CAAC;AACrD,CAAC;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}